openapi: 3.0.0
info:
  version: "1.0.0"
  title: Team thanos
  description: Dockerized ImageResizer Written in PHP Laravel
servers:
  - url: 'https://imageresize.microapi.dev'
paths:
  /v1/register:
    post: 
      summary: 'Register new user'
      tags:
        - Register
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                accountID:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
              required: 
                - accountID
                - password
                - password_confirmation
            
      
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  token:
                    type: string
        422:
          description: 'Error: Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  message: 
                    type: string
                  errors:
                    type: object
                    properties:
                      accountID:
                       type: string
          
        401:
          description: 'page not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
                    properties:
                      accountID:
                        type: interger
          
  /v1/login:
    post: 
      summary: 'Login user'
      tags:
        - Login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                accountID:
                  type: string
                password:
                  type: string
              required: 
                - accountID
                - password
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: 
                  status_code:
                    type: integer
                  access_token:
                    type: string
                  token_type:
                    type: string 
        401:
          description: 'Error Code'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  status_code:
                    type: integer
                  message:
                    type: string
                    description: Unauthorized! Please check your credentials
        404:
          description: 'Error Code'
          content:
            application/json:
              schema:
                type: object
                properties:
                  stutus_code:
                    type: integer
                  message:
                    type: string
                    description: Page Not Found.




  /v1/download/{filename}:
    get:
      security:
       - ApiKeyAuth: []
       - BearerAuth: []
      summary: 'Dowmload the file'
      tags:
        - Download
      
      parameters: 
        - in: path
          name: filename
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'makes file available for download'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
          
  /v1/upload:
    post:
      tags: 
        - Upload
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      summary: Upload image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                width:
                  type: integer
                height:
                  type: integer
                Image:
                  type: string
                  format: binary
              required: 
                - width
                - height
                - Image
      responses:
        200:
          description: Created
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        401:
          description: 'Error Code'
          content:
            application/json:
              schema:
                type: object
                properties:
                  stutus_code:
                    type: integer
                  message:
                    type: string
                    description: This file is too large.
components:
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        Authenticate:
          schema:
            type: string
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY
    
    BearerAuth:
      type: http
      scheme: bearer